// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstName      String
  lastName       String
  email          String   @unique
  hashedPassword String?

  tokens   Token[]
  sessions Session[]
  courses  UserCourse[]
}

model UserCourse {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completed     Boolean
  currentLesson Int

  lessons UserLesson[]

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model UserLesson {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  completed Boolean

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  UserCourse   UserCourse? @relation(fields: [userCourseId], references: [id])
  userCourseId Int?
}

model Course {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String

  lessons    Lesson[]
  UserCourse UserCourse[]
  UserLesson UserLesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  duration Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}
